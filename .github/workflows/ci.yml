name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  schedule:
    # Run weekly security scans
    - cron: '0 6 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt


      - name: Run Ruff (linting)
        run: ruff check src/ tests/ --output-format=github

      - name: Run Ruff (formatting check)
        run: ruff format --check src/ tests/

      - name: Run MyPy (type checking)
        run: mypy src/ --show-error-codes

      - name: Run Bandit (security)
        run: bandit -r src/ -f sarif -o bandit-report.sarif
        continue-on-error: true

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif

      - name: Run Safety (dependency security)
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit (package vulnerabilities)
        run: pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

  # Docker build and security scan
  docker:
    name: Docker Build & Container Security Scan (Trivy + Hadolint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true  # Load image into Docker daemon for Trivy scanning
          tags: csfrace-scraper:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'  # Only fail CI on high/critical vulnerabilities
          exit-code: 1  # Fail CI if high/critical vulns found
          
      - name: Run Trivy vulnerability scanner (SARIF output)
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif

  # Unit Tests Matrix (focused on core functionality)
  unit-tests:
    name: Core Unit Tests - ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]  # Primary OS
        python-version: ["3.9", "3.10", "3.11", "3.12"]  # Full version matrix
        include:
          # Cross-platform testing on key versions
          - os: windows-latest
            python-version: "3.11"
          - os: macos-latest  
            python-version: "3.11"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/ --cov=src --cov-branch --cov-report=xml --cov-report=term-missing --cov-fail-under=28 --junit-xml=junit-unit-${{ matrix.python-version }}.xml -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-py${{ matrix.python-version }}
          path: junit-unit-${{ matrix.python-version }}.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: zachatkinson/csfrace-scrape
          files: ./coverage.xml
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false