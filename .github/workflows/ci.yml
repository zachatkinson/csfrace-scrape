name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run weekly security scans
    - cron: '0 6 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Code quality and security checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt


      - name: Run Ruff (linting)
        run: ruff check src/ tests/ --output-format=github

      - name: Run Ruff (formatting check)
        run: ruff format --check src/ tests/

      - name: Run MyPy (type checking)
        run: mypy src/ --show-error-codes

      - name: Run Bandit (security)
        run: bandit -r src/ -f sarif -o bandit-report.sarif
        continue-on-error: true

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif

      - name: Run Safety (dependency security)
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit (package vulnerabilities)
        run: pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

  # Security Scanning (dedicated job for better reporting)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Run Bandit security scan
        run: bandit -r src/ -f sarif -o bandit-report.sarif
        continue-on-error: true

      - name: Run Safety vulnerability check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit package vulnerabilities
        run: pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.sarif
            safety-report.json
            pip-audit-report.json

  # Unit Tests Matrix (focused on core functionality)
  unit-tests:
    name: Core Unit Tests - Python ${{ matrix.python-version }} (Coverage 80%+)
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=src \
            --cov-branch \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=28 \
            --junit-xml=junit-unit-${{ matrix.python-version }}.xml \
            -v \
            --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-py${{ matrix.python-version }}
          path: junit-unit-${{ matrix.python-version }}.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.python-version == env.PYTHON_VERSION
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: zachatkinson/csfrace-scrape
          files: ./coverage.xml
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # Integration Tests (with Redis service, reduced matrix)
  integration-tests:
    name: Redis Integration Tests - Python ${{ matrix.python-version }} (External Services)
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11"]  # Reduced matrix for integration tests

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Verify Redis connection
        run: |
          redis-cli -h localhost -p 6379 ping

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            --junit-xml=junit-integration-${{ matrix.python-version }}.xml \
            -v \
            --tb=short
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration-py${{ matrix.python-version }}
          path: junit-integration-${{ matrix.python-version }}.xml

  # Performance testing
  performance:
    name: Performance Benchmarks & Memory Profiling (Core Functions)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            --benchmark-sort=mean

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: false
        continue-on-error: true

  # Docker build and security scan
  docker:
    name: Docker Build & Container Security Scan (Trivy + Hadolint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: csfrace-scraper:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'  # Only fail CI on high/critical vulnerabilities
          exit-code: 1  # Fail CI if high/critical vulns found
          
      - name: Run Trivy vulnerability scanner (SARIF output)
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif


  # Dependency review (for PRs)
  dependency-review:
    name: Dependency Security Review (Vulnerabilities & Licenses)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # Semantic Release (automated versioning)
  semantic-release:
    name: Semantic Release
    needs: [quality, unit-tests, integration-tests, performance, docker, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements/dev.txt

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    needs: [quality, unit-tests, integration-tests, performance, docker, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploy to staging environment"
          # Add actual deployment commands here

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    needs: [semantic-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploy to production environment"
          # Add actual deployment commands here

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, unit-tests, integration-tests, performance, docker, security]

    steps:
      - name: Delete old artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            test-results-*
          failOnError: false