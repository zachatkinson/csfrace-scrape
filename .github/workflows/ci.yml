name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  schedule:
    # Run weekly security scans on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "0.8.13"

jobs:
  # Code quality and security checks (foundational job)
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write  # Required for SARIF upload
      actions: read
    
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false  # Security best practice

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: quality

      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Run Ruff (linting)
        run: uv run ruff check src/ tests/ --output-format=github

      - name: Run Ruff (formatting check)
        run: uv run ruff format --check src/ tests/

      - name: Run MyPy (type checking)
        run: uv run mypy src/ --show-error-codes

      - name: Run Bandit (security scan)
        run: uv run bandit -r src/ -f sarif -o bandit-report.sarif
        continue-on-error: true

      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif
          category: bandit

      - name: Run Safety (dependency security)
        run: |
          uv run safety check --format json --output safety-report.json || 
          echo '{"vulnerabilities": []}' > safety-report.json
        continue-on-error: true

      - name: Run pip-audit (package vulnerabilities) 
        run: uv run pip-audit --format=json --output=pip-audit-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json
          retention-days: 30

      - name: Set quality check output
        id: quality-check
        run: echo "passed=true" >> $GITHUB_OUTPUT

  # Unit Tests Matrix (optimized platform strategy)
  # Ubuntu: Full test suite with coverage (primary validation)
  # Windows/macOS: Platform-specific smoke tests (compatibility validation)
  unit-tests:
    name: Unit Tests - ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: quality
    timeout-minutes: 30  # Reduced from 60 - tests should not take this long
    permissions:
      contents: read
      checks: write  # For test reporting
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]  # Simplified to latest stable only for faster CI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: unit-tests-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Install Playwright browsers
        run: uv run playwright install chromium
        
      - name: Run comprehensive unit tests with coverage (Ubuntu - primary validation)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Full test suite with parallel execution on Ubuntu (primary validation platform)
          uv run pytest tests/ -k "not integration and not performance and not e2e and not database" --cov=src --cov-branch --cov-report=xml --cov-report=term-missing --cov-fail-under=28 --junit-xml=junit-unit-${{ matrix.python-version }}.xml -v --tb=short --maxfail=10 -n auto --dist=worksteal
      
      - name: Run platform-specific smoke tests (Windows/macOS - compatibility validation)
        if: matrix.os != 'ubuntu-latest'
        run: |
          # Platform-specific tests: file handling, paths, OS-specific behavior
          # Reduced test scope for faster feedback on platform compatibility
          uv run pytest tests/utils/ tests/config/ tests/caching/test_file_cache.py tests/batch/test_processor.py tests/test_main.py -k "not integration and not performance and not e2e and not database" --junit-xml=junit-unit-${{ matrix.python-version }}.xml -v --tb=short --maxfail=5

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-${{ matrix.os }}-py${{ matrix.python-version }}
          path: junit-unit-${{ matrix.python-version }}.xml
          retention-days: 30

      - name: Upload coverage reports to Codecov (Ubuntu only - primary validation)
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION && matrix.os == 'ubuntu-latest'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # Redis Integration Tests (with service container)
  redis-integration-tests:
    name: Redis Integration Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15
    permissions:
      contents: read
      checks: write
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]  # Focus on primary version for Redis tests

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: redis-integration-${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools
          
      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Verify Redis connection
        run: redis-cli -h localhost -p 6379 ping

      - name: Run Redis integration tests
        run: |
          uv run pytest tests/integration/test_redis_cache.py --junit-xml=junit-redis-integration-${{ matrix.python-version }}.xml -v --tb=short --maxfail=5
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload Redis integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-redis-integration-py${{ matrix.python-version }}
          path: junit-redis-integration-${{ matrix.python-version }}.xml
          retention-days: 30

  # Database Integration Tests (with PostgreSQL service container)
  database-integration-tests:
    name: Database Integration Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 20
    permissions:
      contents: read
      checks: write
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]  # Focus on primary version for database tests

    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: database-integration-${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Verify PostgreSQL connection
        run: |
          pg_isready -h localhost -p 5432 -U test_user -d test_db
          psql -h localhost -p 5432 -U test_user -d test_db -c "SELECT version();"
        env:
          PGPASSWORD: test_password

      - name: Run database integration tests
        run: |
          uv run pytest tests/database/ -m "database" --junit-xml=junit-database-integration-${{ matrix.python-version }}.xml -v --tb=short --maxfail=5
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: test_db
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password

      - name: Upload database integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-database-integration-py${{ matrix.python-version }}
          path: junit-database-integration-${{ matrix.python-version }}.xml
          retention-days: 30

  # Converter Integration Tests (standalone)
  converter-integration-tests:
    name: Converter Integration Tests - Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 10
    permissions:
      contents: read
      checks: write
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]  # Use latest version for integration tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: converter-integration-${{ matrix.python-version }}

      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Run converter integration tests
        run: |
          uv run pytest tests/integration/test_converter_integration.py --junit-xml=junit-converter-integration-${{ matrix.python-version }}.xml -v --tb=short --maxfail=5

      - name: Upload converter integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-converter-integration-py${{ matrix.python-version }}
          path: junit-converter-integration-${{ matrix.python-version }}.xml
          retention-days: 30

  # Removed dependency compatibility jobs - using uv.lock for reproducible builds
  # Trust modern dependency management instead of redundant version testing

  # Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [quality, unit-tests]
    timeout-minutes: 60
    permissions:
      contents: read
    
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-suffix: performance

      - name: Install dependencies with UV
        run: uv sync --frozen --no-editable

      - name: Install Playwright browsers
        run: uv run playwright install chromium

      - name: Run performance tests
        run: |
          # Run all performance tests including memory profiling and benchmarks
          # Don't use --benchmark-only as it skips non-benchmark tests (memory profiler, cache tests)
          uv run pytest tests/performance/ --benchmark-json=benchmark.json --benchmark-sort=mean -v

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json
          retention-days: 90

  # Docker Security Scan (pinned versions, proper error handling)
  docker-security:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: csfrace-scraper:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.16.1  # Pinned version for security
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: 1
          
      - name: Run Trivy vulnerability scanner (SARIF output)
        uses: aquasecurity/trivy-action@0.16.1
        if: always()
        with:
          image-ref: 'csfrace-scraper:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
        continue-on-error: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('hadolint-results.sarif') != ''
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

  # Dependency Review (PR only)
  dependency-review:
    name: Dependency Security Review
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: read
    
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, MIT