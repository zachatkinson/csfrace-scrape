name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # Code Quality Checks (Fast feedback)
  lint-and-format:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/dev.txt

    - name: Lint with Ruff
      run: ruff check src/ tests/ --output-format=github

    - name: Check formatting with Black  
      run: black --check --diff src/ tests/

    - name: Type check with MyPy
      run: mypy src/ --show-error-codes

  # Unit Tests Matrix
  unit-tests:
    name: "Unit Tests (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/base.txt
        python -m pip install -r requirements/test.txt

    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=junit-${{ matrix.python-version }}.xml \
          -v \
          --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-unit-${{ matrix.python-version }}
        path: junit-${{ matrix.python-version }}.xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unit-tests
        name: unit-tests-coverage
        fail_ci_if_error: false

  # Integration Tests (requires services)
  integration-tests:
    name: "Integration Tests (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11"]  # Reduced matrix for integration tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/base.txt
        python -m pip install -r requirements/test.txt
        python -m pip install -r requirements/optional.txt  # Redis support

    - name: Verify Redis connection
      run: |
        redis-cli -h localhost -p 6379 ping

    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --junit-xml=junit-integration-${{ matrix.python-version }}.xml \
          -v \
          --tb=short
      env:
        REDIS_URL: redis://localhost:6379

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-integration-${{ matrix.python-version }}
        path: junit-integration-${{ matrix.python-version }}.xml

  # Security Scanning
  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/dev.txt

    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true

    - name: Run Safety vulnerability check
      run: safety check --json --output safety-report.json || true

    - name: Run pip-audit
      run: pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # Release job (only on master push after all tests pass)
  release:
    name: "Semantic Release"
    needs: [unit-tests, integration-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install base dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/base.txt

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v3
      with:
        semantic_version: 19
        extra_plugins: |
          @semantic-release/changelog@6.0.3
          @semantic-release/git@10.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}